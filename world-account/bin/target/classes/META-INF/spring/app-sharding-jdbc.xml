<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.dangdang.com/schema/ddframe/rdb
                        http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd">
	<!-- 配置Druid数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 参考：https://github.com/alibaba/druid/wiki/DruidDataSource配置属性列表， https://github.com/alibaba/druid/wiki/连接泄露检测， https://github.com/alibaba/druid/wiki/常见问题 -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- initialSize默认0：初始化时建立物理连接的个数 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<!-- maxActive默认8：最大连接池数量 -->
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- minIdle默认8：最小连接池数量 -->
		<property name="minIdle" value="${druid.minIdle}" />
		<!-- maxWait：获取连接时最大等待时间，单位毫秒。 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<!-- testOnBorrow默认true：申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<!-- testOnReturn默认false：归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- testWhileIdle默认false：建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<!-- timeBetweenEvictionRunsMillis：配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- minEvictableIdleTimeMillis：配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<!-- 当发生连接泄漏时，使用RemoveAbandanded相关配置，用来关闭长时间不使用的连接。 -->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- removeAbandonedTimeout：单位秒 -->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${druid.logAbandoned}" />
		<!-- 配置监控统计拦截的filters，属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall -->
		<property name="filters" value="${druid.filters}" />
		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>

    <rdb:strategy id="tableShardingStrategy" sharding-columns="user_id" algorithm-class="com.wifi.live.account.util.sharding.algorithm.SingleKeyModuloTableShardingAlgorithm"/>

    <rdb:data-source id="shardingDataSource">
        <rdb:sharding-rule data-sources="dataSource" default-data-source="dataSource">
            <rdb:table-rules>
                <rdb:table-rule logic-table="u_user_passport" actual-tables="u_user_passport_${0..1}" table-strategy="tableShardingStrategy" />
                <rdb:table-rule logic-table="u_user_base_info" actual-tables="u_user_base_info_${0..1}" table-strategy="tableShardingStrategy" />
            <!-- rdb:table-rule logic-table="u_user_sns_info" actual-tables="u_user_sns_info_${0..1}" table-strategy="tableShardingStrategy" / -->
            </rdb:table-rules>
        </rdb:sharding-rule>
    </rdb:data-source>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="shardingDataSource" />
    </bean>
    
    <context:property-placeholder location="classpath:META-INF/conf/conf.properties" ignore-unresolvable="true"/>

</beans>
